#+startup: indent hidestars

#+title: Emacs Configuration
#+author: Luke M. Perez

* IDO Mode
Ido-mode is a great way to show the file path when searching.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC
* Scrolling

For now, I'm going to leave this blank. I'll decide how I want Emacs to handle my scrolling of text.

* Spell Check
I use =flyspell= for spell check. the command is C-; to check the
previous word. If it does not autocorrect with the correct word, you
can run the command again.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :defer t
    :init
    (progn
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      (add-hook 'text-mode-hook 'flyspell-mode)
      )
    :config
    ;; Sets flyspell correction to use two-finger mouse click
    (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
    )

  ;; This tells Emacs were to find ispell when using the Mac
  (setq ispell-program-name "/usr/local/bin/ispell")

#+END_SRC

* AuCTeX
If you're going to write LaTeX files on Emacs, AucTeX is the Gold Standard. No sense in trying anything else. One challenge that I had while setting up AuCTeX is that with Mac OSX El Cap, Emacs can have trouble finding the TeX distribution. I found very useful code from [[http://www.qqyang.org/blog/not-complete-guide-to-basictex/][Qingqing Yang's blog]]

#+BEGIN_SRC emacs-lisp
(let (
      (my-paths
       '("~/bin"
         "/usr/local/bin"
         "/usr/bin"
         "/Library/TeX/texbin" ; add path to basictex bin
         "/usr/texbin" ; add path to basictex bin
         "/bin"
         )))

  (setenv "PATH" (concat (getenv "PATH") ":"
                         (mapconcat 'identity my-paths ":")))
  (setq exec-path (append my-paths (list "." exec-directory))))

(use-package tex-site
  :ensure auctex
  :config
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (setq TeX-auto-save t
        TeX-parse-self t
        reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook #'TeX-PDF-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-mode t)
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk"))
    )
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk"))
    )
  (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "latexmk"))))
#+END_SRC
* Org-Mode

Org-Mode is the primary way that I should be writing. In this section, we need to add some settings that make things easier to manage, export, and the like. In previous setups of my =.emacs= configuration, I did not organize these as well as I could have. So here, I'm going to include the settings relevant to each mode or feature. More information can be found via the org-mode manual: I prefer the pdf [[http://orgmode.org/org.pdf][found here]]. 

It bears mentioning that if I ever want to check my org-mode verison, I can use =M-x org-version=. 

** Exporting

#+BEGIN_SRC emacs-lisp :results silent

(require 'ox-md)
(require 'ox-beamer)
(require 'ox-latex)
(require 'ox-odt)

#+END_SRC

** Capture

Make a key-binding to my notes file.

The point with these hot-keys is to make short-cuts to several org files while I will use for notetaking. Ideally, I'd like to do this with markdown. Although Org-mode is much more powerful than markdown, I am partial to the option of keeping unique independent markdown files for each idea rather than a cluster of =.org= files. Still, this is helpful as it helps me thinkthrough how that might work. 

#+BEGIN_SRC emacs-lisp
  ;; Set our default Notes file.
  (setq org-default-notes-file "~/Dropbox/AcademicWork/Org/notes.org")

  ;; Now set some keybindings to open specific org-files.
  ;; Basic Capture
  (global-set-key (kbd "C-c c") 'org-capture)
  ;; Dissertation
  (global-set-key (kbd "C-c d") 
                  (lambda () (interactive) (find-file "~/Documents/Dissertation/dissertation.org")))
  ;; general notes
  (global-set-key (kbd "C-c n") 
                  (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/notes.org")))
  ;; DHFS workflow file
  (global-set-key (kbd "C-c w")
                  (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/dhfs.org")))
#+END_SRC

** Org-Ref
[[https://github.com/jkitchin/org-ref][Org-Ref]] is a package that brings bibliographic tools to Org-Mode. 

#+BEGIN_SRC emacs-lisp

;; First we need to require org-ref

(use-package org-ref
	:ensure t
	:init
	(setq reftex-default-bibliography '(~/Dropbox/AcademicWork/Bibs/refs.bib"))
	(setq org-ref-default-bibliography '(~/Dropbox/AcademicWork/Bibs/refs.bib"))
	(setq helm-bibtex-bibliography "~Dropbox/AcademicWork/Bibs/refs.bib"))


;; Next we need to configure some settings.
;; * We begin by setting up the default bibliography
;;   which I have saved in a Dropbox folder.
;; * Then we'll set up bibliographies for notes, and
;;   other purposes.

(setq reftex-default-bibliography 
    '("~/Dropbox/AcademicWork/Bibs/refs.bib "))

#+END_SRC


* Themes
** Preliminaries 
First we need to be able to switch themes as needed. I copied this code directly from [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]]

#+BEGIN_SRC emacs-lisp

;; This allows us to switch themes as needed

(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)

#+END_SRC

Now we can load out themes

** Paganini Theme

#+BEGIN_SRC emacs-lisp

(use-package paganini-theme
	:ensure t
	:defer t)

#+END_SRC

** Zenburn Theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
	:defer t)

#+END_SRC

** Solarized-Light

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
	:ensure t
	:defer t)

#+END_SRC

** Github Theme

#+BEGIN_SRC emacs-lisp

(use-package github-theme
	:ensure t
	:config
	(load-theme 'github t)
)

#+END_SRC
* Experimental
** Save backups to Directory

Here we want to save the backups to a single directory rather than in the file I'm working on.

#+BEGIN_SRC emacs-lisp :results silent

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+END_SRC
** Prevent emacs from creating folder "auto/" with .el files

Here we want to prevent Emacs from automatically creating subdirectories when editing files. These directories contain =.el= files with the headers, sections, and other code used when editing =TeX= and =markdown= files.

#+BEGIN_SRC emacs-lisp :result silent

(setq TeX-auto-save nil)
(setq auto-save-list-file-prefix nil)

#+END_SRC

** Deft Mode

Instructions can be taken from [[https://github.com/jrblevin/deft][Github/DeftMode]]. It is a package that achieves a notational velocity like workflow from within Emacs.


#+BEGIN_SRC emacs-lisp :results silent

(setq deft-extensions '("txt" "tex" "org" "md"))
(setq deft-directory "~/Dropbox/AcademicWork/notes")

#+END_SRC



** Line Spacing
I'd like to have a little more space between lines so that I can read the text that much easier. To do this, we need a little code.

#+BEGIN_SRC emacs-lisp :results silent
(setq-default line-spacing 0.25)
#+END_SRC
** Ignore Headlines
This code permits the use of two tags, =:No_Export:= and =no_title=. 

#+BEGIN_SRC emacs-lisp results: silent

(defun org-remove-headlines (backend)
  "Remove headlines with :no_title: tag."
  (org-map-entries (lambda () (delete-region (point-at-bol) (point-at-eol)))
                   "no_title"))

(add-hook 'org-export-before-processing-hook #'org-remove-headlines)

#+END_SRC
** Hot Key for a property drawer

#+BEGIN_SRC emacs-lisp :results silent

(global-set-key "\M-p" 'org-insert-property-drawer)

#+END_SRC
** Mac OSX Settings

#+BEGIN_SRC emacs-lisp
;; Don't make new frames when opening a new file with Emacs
(setq ns-pop-up-frames nil)
#+END_SRC
** In-line Footnotes

Taking inspiration from [[https://www.wisdomandwonder.com/link/8750/only-use-in-line-footnotes-unless-your-document-is-very-very-small][Wisdom and Wonder]], I set up Org-mode to create all in-line footnotes. The post has more, like random generated IDs, but for now, I am just experimenting.

#+BEGIN_SRC emacs-lisp

(setq org-footnote-define-inline +1)

#+END_SRC

* Goals and Ideas
** TODO I want to make this capture template more usable for research, scholarship, and the like. For now, I'm just going to create a few templates for the default =.org= capture file =notes.org=.
* Archived
** Org-Bullets
This creates bullets rather than asterisks. I didn't really like it so I turned it off. But I save the code, commented out, so that I can use it later if I want.

#+BEGIN_SRC emacs-lisp

;;(require 'org-bullets)
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC
