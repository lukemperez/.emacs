#+startup: indent

#+title: Emacs Configuration
#+author: Luke M. Perez

* Autosave

#+BEGIN_SRC emacs-lisp :results silent
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(setq TeX-auto-save nil)
(setq auto-save-list-file-prefix nil)

#+END_SRC
* Setting up cache folders
Finally, I set up a cache folder in my =.emacs.d= folder so that it's not quite as crowded:

#+BEGIN_SRC emacs-lisp
  (defvar my/emacs-cache (concat user-emacs-directory ".cache/")
    "Folder to store cache files in.

  Should end with a forward slash.")
#+END_SRC

Save a few misc files in the =.cache= directory:

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat my/emacs-cache "customize.el"))
  (setq bookmark-default-file (concat my/emacs-cache "bookmarks"))
  (setq recentf-save-file (concat my/emacs-cache "recentf"))
  (setq nsm-settings-file (concat my/emacs-cache "network-security.data"))
#+END_SRC
* IDO Mode
Ido-mode is a great way to show the file path when searching.

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC
* Scrolling

For now, I'm going to leave this blank. I'll decide how I want Emacs to handle my scrolling of text.

* Spell Check
I use =flyspell= for spell check. the command is C-; to check the
previous word. If it does not autocorrect with the correct word, you
can run the command again.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :defer t
    :init
    (progn
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      (add-hook 'text-mode-hook 'flyspell-mode)
      )
    :config
    ;; Sets flyspell correction to use two-finger mouse click
    (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
    )

  ;; This tells Emacs were to find ispell when using the Mac
  (setq ispell-program-name "/usr/local/bin/ispell")

#+END_SRC

* AuCTeX
If you're going to write LaTeX files on Emacs, AucTeX is the Gold Standard. No sense in trying anything else. One challenge that I had while setting up AuCTeX is that with Mac OSX El Cap, Emacs can have trouble finding the TeX distribution. I found very useful code from [[http://www.qqyang.org/blog/not-complete-guide-to-basictex/][Qingqing Yang's blog]]

#+BEGIN_SRC emacs-lisp
(let (
      (my-paths
       '("~/bin"
         "/usr/local/bin"
         "/usr/bin"
         "/Library/TeX/texbin" ; add path to basictex bin
         "/usr/texbin" ; add path to basictex bin
         "/bin"
         )))

  (setenv "PATH" (concat (getenv "PATH") ":"
                         (mapconcat 'identity my-paths ":")))
  (setq exec-path (append my-paths (list "." exec-directory))))
#+END_SRC

I actually don't know what the below code does. I'm writing this note to myself so that I make sure to figure it out, and then to modify or delete it as needed.

#+BEGIN_SRC emacs-lisp :results silent

(use-package tex-site
  :ensure auctex
  :config
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (setq TeX-auto-save nil ; remove "/auto/" file generation
        TeX-parse-self t
        reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook #'TeX-PDF-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-mode t)
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk"))
    )
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk"))
    )
  (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "latexmk"))))
#+END_SRC
* RefTeX
I want to be sure that RefTeX loads whenever I am working on a TeX document. I figured out the code from [[https://emacs.stackexchange.com/questions/34189/emacs-setup-for-latex-after-use-package-verse][Stack Exchange.]] (NB: There's mode code in the answer suggesting key bindings for GREP searching the document. Might be worth looking into.)

#+BEGIN_SRC emacs-lisp :results silent
;; Set RefTeX to load automatically with AUCTeX
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'markdown-mode-hook 'turn-on-reftex) ; unsure if this works.
(setq reftex-plug-into-AUCTeX t)

#+END_SRC

Our next task is setting up a global bibliography so that RefTeX knows where to look when invoking the command for citations. Many people are fond of listing that setting the global bibliographies can be a list but it was difficult to find an example of what that looked like. I actually use two different =.bib= files, one for books and articles (my references) and another for primary sources (archival research). Many thanks to [[https://github.com/tmalsburg/helm-bibtex][Titus von der Malsburg's GitHub]] for showing how it's done.

#+BEGIN_SRC emacs-lisp :results silent
;; So that RefTeX finds my bibliography
(setq reftex-default-bibliography
      '("~/Dropbox/AcademicWork/Bibs/refs.bib"
        "~/Dropbox/AcademicWork/Bibs/primary.bib"))

#+END_SRC

The default setting for RefTeX is to use =\cite{key}= when inserting citations. Because I use Biblatex-Chicago for nearly all my writing, I need to make changes to how the citation keys are generated. Here I am thankful to a post [[https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands][Stack Exchange and the answer by Aaron]].

#+BEGIN_SRC emacs-lisp :results silent
  (eval-after-load 'reftex-vars
    '(progn
       ;; (also some other reftex-related customizations)
       (setq reftex-cite-format
             '((?\C-m . "\\cite[]{%l}")
               (?f . "\\footcite[][]{%l}")
               (?t . "\\textcite[?]{%l}")
               (?p . "\\parencite[]{%l}")
               (?a . "\\autocite[?][]{%l}.")
               (?n . "\\nocite{%l}")
               (?P . "[@%l]")
               (?T . "@%l [p. ]"))))
  )
#+END_SRC

This next bit of code should allow reftex citations inside markdown.

#+BEGIN_SRC emacs-lisp :results silent
  ;; define markdown citation formats

  ;; (defvar markdown-cite-format)
  ;; (setq markdown-cite-format
  ;;       '(
  ;;         (?\C-m . "[@%l]")
  ;;         (?p . "[@%l]")
  ;;         (?t . "@%l")
  ;;         )
  ;;       )
  ;; Previous code commented out because it may be unneeded.

  ;; wrap reftex-citation with local variables for markdown format
  (defun markdown-reftex-citation ()
    (interactive)
    (let ((reftex-cite-format markdown-cite-format)
          (reftex-cite-key-separator "; @"))
      (reftex-citation)))

  ;; bind modified reftex-citation to C-c[, without enabling reftex-mode
  ;; https://www.gnu.org/software/auctex/manual/reftex/Citations-Outside-LaTeX.html#SEC31
  (add-hook
   'markdown-mode-hook
   (lambda ()
     (define-key markdown-mode-map "\C-c[" 'markdown-reftex-citation)))
#+END_SRC
* Org-Mode

Org-Mode is the primary way that I should be writing. In this section, we need to add some settings that make things easier to manage, export, and the like. In previous setups of my =.emacs= configuration, I did not organize these as well as I could have. So here, I'm going to include the settings relevant to each mode or feature. More information can be found via the org-mode manual: I prefer the pdf [[http://orgmode.org/org.pdf][found here]]. 

It bears mentioning that if I ever want to check my org-mode verison, I can use =M-x org-version=. 

** "Word Processor
[[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Howardism]] has the good on setting up Org-Mode to work like a word processor.
#+BEGIN_SRC emacs-lisp :results silent
  ; remove slashes when presenting italice
  (setq org-hide-emphasis-markers t)

  ;; (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;;                              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;        (base-font-color     (face-foreground 'default nil 'default))
  ;;        (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;   (custom-theme-set-faces 'user
  ;;                           `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;                           `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;                           `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;                           `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;                           `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;                           `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.15))))
  ;;                           `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;                           `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.35))))
  ;;                           `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
#+END_SRC

** Exporting

#+BEGIN_SRC emacs-lisp :results silent

(require 'ox-md)
(require 'ox-beamer)
(require 'ox-latex)

#+END_SRC

** Capture
*** Key-bindings
Make a key-binding to my notes file.

The point with these hot-keys is to make short-cuts to several org files while I will use for notetaking. Ideally, I'd like to do this with markdown. Although Org-mode is much more powerful than markdown, I am partial to the option of keeping unique independent markdown files for each idea rather than a cluster of =.org= files. Still, this is helpful as it helps me thinkthrough how that might work. 

#+BEGIN_SRC emacs-lisp :results silent
  ;; Set our default Notes file.
  (setq org-default-notes-file "~/Dropbox/AcademicWork/Org/notes.org")

  ;; General Academic Notes
  (global-set-key (kbd "C-c n") 
                  (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/notes.org")))

  ;; Dissertation Outline
  ;; (global-set-key (kbd "C-c d") 
  ;;                (lambda () (interactive) (find-file "~/Documents/Dissertation/dissertation.org")))

  ;; A 2018 Journal (work in progress)
  (global-set-key (kbd "C-c j")
                  (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/journal.org")))

  ;; DHFS workflow file
  ; (global-set-key (kbd "C-c w")
  ;                 (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/dhfs.org")))

  ;; GTD Org File
  ; (global-set-key (kbd "C-c z")
  ;                 (lambda () (interactive) (find-file "~/Dropbox/AcademicWork/Org/gtd.org")))

#+END_SRC

*** Capture templates
Next we setup the capture key-bindings and templates. We begin with the basic capture =C-cc=
#+BEGIN_SRC emacs-lisp :results silent

;; Basic Capture
(global-set-key (kbd "C-c c") 'org-capture)

;; Advanced capture (test)
(setq org-capture-templates
      '(;; testing source: http://www.ideaio.ch/posts/my-gtd-system-with-org-mode.html
        ("q" "Quote" entry (file+datetree "~/Dropbox/AcademicWork/Org/notes.org" "Concepts" "Quotes")
         "* %^{Title} %U         %?")
        ("y" "Connection" entry (file+datetree "~/Dropbox/AcademicWork/Org/notes.org" "Connecting")
         "* %^{Title} %U          %?")

))

#+END_SRC
** Org-Ref
[[https://github.com/jkitchin/org-ref][Org-Ref]] is a package that brings bibliographic tools to Org-Mode. 
*** Basic Setup
#+BEGIN_SRC emacs-lisp :results silent

;; First we need to require org-ref
(require 'org-ref)

(setq reftex-default-bibliography '("~/Dropbox/AcademicWork/Bibs/refs.bib"))

;; see org-ref for use of these variables

(setq org-ref-bibliography-notes "~/Dropbox/AcademicWork/Org/notes.org"
      org-ref-default-bibliography '("~/Dropbox/AcademicWork/Bibs/refs.bib")
      org-ref-pdf-directory "~/Dropbox/AcademicWork/Org/PDFs/")

#+END_SRC

*** Helm
Work in progress

#+BEGIN_SRC emacs-lisp :results silent

;; (setq helm-bibtex-bibliography "~Dropbox/AcademicWork/Bibs/refs.bib")))

#+END_SRC

* Markdown files
Although Markdown Mode is not as powerful as Org Mode, it has the benefit of being /the/ standard for plain text co-authoring, R coding, and interoperability with =pandoc=. Nearly anything I write begins as a Markdown file unless I need more power while editing (in which case, I use =LaTeX= or =org-mode=.

#+BEGIN_SRC emacs-lisp
    
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init )

#+END_SRC

* Pandoc Mode
I love =Pandoc=. It converts nearly any text file into another. I use it to convert to =.md= files into =.tex= or =.pdf= as needed.

#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
    :ensure t
    :ensure hydra
    :init
    (add-hook 'markdown-mode-hook 'pandoc-mode)
    (add-hook 'TeX-mode-hook 'pandoc-mode)
    (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
    (global-set-key (kbd "C-c p") 'pandoc-main-hydra/body)

  )
#+END_SRC

We also want to use =Polymode= so that emacs can edit Rmarkdown type files that have R code in them.

*This is temporary commented out because it seems to be giving emacs issues when loading.*

# #+BEGIN_SRC emacs-lisp
#   (use-package polymode
#     :ensure t
#     :mode
#     ("\\.Snw" . poly-noweb+r-mode)
#     ("\\.Rnw" . poly-noweb+r-mode)
#     ("\\.Rmd" . poly-markdown+r+mode)
#     ("\\.md" . poly-markdown-mode)
#     )

# #+END_SRC

* Themes
** Preliminaries 
First we need to be able to switch themes as needed. I copied this code directly from [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]]

#+BEGIN_SRC emacs-lisp

;; This allows us to switch themes as needed

(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)

#+END_SRC

Now we can load out themes. 

** Zenburn Theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
      :ensure t
      :config
      (load-theme 'zenburn t)
  )

#+END_SRC

** Atom Dark

#+BEGIN_SRC emacs-lisp

  ;; (use-package atom-dark-theme
  ;; 	 :ensure t
  ;;      :defer t)

   #+END_SRC

** Solarized Theme (light & dark)

#+BEGIN_SRC emacs-lisp :results silent

(use-package solarized-theme
	:ensure t
	:defer t)

#+END_SRC

** Github Theme

#+BEGIN_SRC emacs-lisp :results silent

  ;; (use-package github-theme
  ;; 	:ensure t
  ;; 	:defer t)

#+END_SRC

* Experimental
** Save backups to Directory

Here we want to save the backups to a single directory rather than in the file I'm working on.

#+BEGIN_SRC emacs-lisp :results silent

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+END_SRC
** Prevent emacs from creating folder "auto/" with .el files

Here we want to prevent Emacs from automatically creating subdirectories when editing files. These directories contain =.el= files with the headers, sections, and other code used when editing =TeX= and =markdown= files.

#+BEGIN_SRC emacs-lisp :result silent

(setq TeX-auto-save nil)
(setq auto-save-list-file-prefix nil)

#+END_SRC

** Deft Mode

Instructions can be taken from [[https://github.com/jrblevin/deft][Github/DeftMode]]. It is a package that achieves a notational velocity like workflow from within Emacs.


#+BEGIN_SRC emacs-lisp :results silent

(setq deft-extensions '("txt" "tex" "org" "md"))
(setq deft-directory "~/Dropbox/AcademicWork/notes")

#+END_SRC

** Line Spacing
I'd like to have a little more space between lines so that I can read the text that much easier. To do this, we need a little code.

#+BEGIN_SRC emacs-lisp :results silent
(setq-default line-spacing 0.3)
#+END_SRC
** Ignore Headlines
This code permits the use of two tags, =:No_Export:= and =no_title=. 

#+BEGIN_SRC emacs-lisp results: silent

(defun org-remove-headlines (backend)
  "Remove headlines with :no_title: tag."
  (org-map-entries (lambda () (delete-region (point-at-bol) (point-at-eol)))
                   "no_title"))

(add-hook 'org-export-before-processing-hook #'org-remove-headlines)

#+END_SRC
** Hot Key for a property drawer

#+BEGIN_SRC emacs-lisp :results silent

(global-set-key "\M-p" 'org-insert-property-drawer)

#+END_SRC
** Mac OSX Settings

#+BEGIN_SRC emacs-lisp
;; Don't make new frames when opening a new file with Emacs
(setq ns-pop-up-frames nil)
#+END_SRC
** In-line Footnotes

Taking inspiration from [[https://www.wisdomandwonder.com/link/8750/only-use-in-line-footnotes-unless-your-document-is-very-very-small][Wisdom and Wonder]], I set up Org-mode to create all in-line footnotes. The post has more, like random generated IDs, but for now, I am just experimenting.

#+BEGIN_SRC emacs-lisp

(setq org-footnote-define-inline +1)

#+END_SRC
** Unwrap line

This bit of code lets me take a paragraph that includes line-breaks and turn into a single line. [[https://www.emacswiki.org/emacs/UnfillParagraph][The code was found here]].

#+BEGIN_SRC emacs-lisp :results silent

;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

* Goals and Ideas
** TODO I want to make this capture template more usable for research, scholarship, and the like. For now, I'm just going to create a few templates for the default =.org= capture file =notes.org=.
** TODO I want RefTeX to prompt me for page numbers when calling biblatex citation keys.
** TODO I want to add a command for autocites (plural citations) in reftex
** TODO Set up Magit Mode
* Archived
** Org-Bullets
This creates bullets rather than asterisks. I didn't really like it so I turned it off. But I save the code, commented out, so that I can use it later if I want.

#+BEGIN_SRC emacs-lisp
;; Removed for troubleshooting

;; (require 'org-bullets)
;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC
